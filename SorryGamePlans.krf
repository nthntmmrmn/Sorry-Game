(in-microtheory SorryGameMt)

;;; CHOICES FOR EACH CARD:
;;; 1. Can move from start?
;;;    a. can move, nothing on space 1
;;;    b. can move, opponent piece on space 1
;;;    c. cannot move, if all pieces at start, swap the turn
;;; 2. Can move home?
;;;    a. will not win 
;;;    b. will win 
;;; 3. Can move and hit opponent? (opponent is not in the safety zone)
;;; 4. Else, move random piece.
;;; 5. If the moving piece will go beyond home, just swap the turn and do nothing.
;;;    BUT: Make sure moving piece does not put it beyond home!
;;; 5. If can't move, forfeit turn

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; SORRY-ONE 
;;; Rule 1a:
(preconditionForMethod
 (and
      (currCard Sorry-One)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 0)
      (noSameColorAhead ?piece1 1)
      (noOppoAhead ?piece1 1)
  	  (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
	  		  (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))

 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; update piece position
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 1)))
    (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 0)))
 
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-One)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; Rule 1b:
(preconditionForMethod
 (and
      (currCard Sorry-One)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 0)
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece3 ?color2)
      (piecePosition ?piece3 31)
	
      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards))))
      )

 (methodForAction
  (moveSorryPiece)

  (actionSequence
   (TheList
    ;;; update piece position
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 1)))
    (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 0)))
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece3 0)))
    (doForget
    	(ist-Information SorryFactsMt (piecePosition ?piece3 31)))
 
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-One)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; Rule 2a:
;;; agent has one piece one step away from home but will not win

(preconditionForMethod
 (and
      (currCard Sorry-One)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
      (notWinner ?agent ?piece1)
      (evaluate 66 (PlusFn ?position1 1))

      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
   (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 66)))

    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-One)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard))))))
    )


;;; Rule 2b:
;;; agent has one piece one step away from home and will win the game

(preconditionForMethod
 (and
      (currCard Sorry-One)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (piecePosition ?piece1 ?position1)
      (evaluate 66 (PlusFn ?position1 1))
      (winner ?agent ?piece1)
      

      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards))))
      )

 (methodForAction
  (moveSorryPiece)

  (actionSequence
   (TheList
    (doForget 
      (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doForget 
      (ist-Information SorryFactsMt (piecePosition ?piece3 ?position2)))
    (doRecord
      (ist-Information SorryFactsMt (piecePosition ?piece1 ?a)))
    (doRecord 

    	(ist-Information SorryFactsMt (gameWinner ?agent1)))

;;; Rule 3

(preconditionForMethod
 (and
      (currCard Sorry-One)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)

      ;;; no piece at start
      (colorOfPiece ?piece2 ?color1)
      (colorOfPiece ?piece3 ?color1)
      (colorOfPiece ?piece4 ?color1)
      (different ?piece1 ?piece2 ?piece3 ?piece4)
      (uninferredSentence (piecePosition ?piece1 0))
      (uninferredSentence (piecePosition ?piece2 0))
      (uninferredSentence (piecePosition ?piece3 0))
      (uninferredSentence (piecePosition ?piece4 0))
      
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece5 ?color2)
      (piecePosition ?piece5 ?position2)
      (evaluate 30 (AbsoluteValueFn (DifferenceFn (PlusFn ?position1 1) ?position2)))
      (evaluate ?nextPosition (PlusFn ?position1 1))

      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))

 (methodForAction
  (moveSorryPiece)

  (actionSequence
   (TheList
    (doForget 
      (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doForget 
      (ist-Information SorryFactsMt (piecePosition ?piece5 ?position2)))
    (doRecord
      (ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))
    (doRecord 
      (ist-Information SorryFactsMt (piecePosition ?piece3 0)))

    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Three)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; Rule 4:

(preconditionForMethod
 (and
      (currCard Sorry-One)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
      (noSameColorAhead ?piece1 1)
      (noOppoAhead ?piece1 1)
      (evaluate ?nextPosition (PlusFn ?position1 1))

      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
   (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))

    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-One)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))


;;; END SORRY-ONE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; SORRY-THREE
;;; piece in start CANNOT move 
;;; Rule 1c & 5:
(preconditionForMethod
 (and
      (currCard Sorry-Three)  
      (whoseTurn ?agent1)
      (allCannotMove ?agent1 3)
      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Three)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))


;;; Rule 2a:
;;; agent has a piece which is Three steps away from HOME and will not win
(preconditionForMethod
 (and
      (currCard Sorry-Three)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
      (notWinner ?agent ?piece1)
      (evaluate 66 (PlusFn ?position1 3))

      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
   (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 66)))

    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Three)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))


;;; Rule 2b
;;; agent has a piece which is Three steps away from HOME and will win the game
(preconditionForMethod
 (and
      (currCard Sorry-Three)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
      (evaluate 66 (PlusFn ?position1 3))
      (winner ?agent ?piece1)
      
      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Two)))
   (doRecord
      (ist-Information SorryFactsMt (currCard ?newCard)))
    (doRecord 
    	(ist-Information SorryFactsMt (gameWinner ?agent1)))

;;; Rule 3

(preconditionForMethod
 (and
      (currCard Sorry-Three)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (piecePosition ?piece1 ?position1)
      (uninferredSentence (piecePosition ?piece1 0))
      (colorOfPiece ?piece1 ?color1)
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece3 ?color2)
      (piecePosition ?piece3 ?position2)
      (evaluate 30 (AbsoluteValueFn (DifferenceFn (PlusFn ?position1 3) ?position2)))
      (evaluate ?nextPosition (PlusFn ?position1 3))

      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))

 (methodForAction
  (moveSorryPiece)

  (actionSequence
   (TheList
    (doForget 
      (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doForget 
      (ist-Information SorryFactsMt (piecePosition ?piece3 ?position2)))
    (doRecord
      (ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))
    (doRecord 
      (ist-Information SorryFactsMt (piecePosition ?piece3 0)))

    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Three)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; Rule 4 

(preconditionForMethod
 (and
      (currCard Sorry-Three)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (uninferredSentence (piecePosition ?piece1 0))
      (piecePosition ?piece1 ?position1)
      (noSameColorAhead ?piece1 3)
      (noOppoAhead ?piece1 3)
      (evaluate ?nextPosition (PlusFn ?position1 3))
      (lessThan ?nextPosition 66)
      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)

  (actionSequence
   (TheList
   (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))

    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Three)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; END SORRY-THREE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; SORRY-TEN
;;; CHOICES FOR SORRY-TEN:
;;; 1. Can move from start?
;;;    c. cannot move, if all pieces at start, swap the turn
;;; 2. Can move home? (Ten steps forward)
;;;    a. will not win 
;;;    b. will win 
;;; 3. Can move and hit opponent? 
;;;    a. ten forward (opponent is not in the safety zone)
;;;    b. one backward
;;; 4. Else, move random piece ten. (Ten steps forward)
;;; 5. If the moving piece will go beyond home, move random piece one backward.
;;;    BUT: Make sure moving piece does not put it beyond home!

;;; Rule 1c:
(preconditionForMethod
 (and
      (currCard Sorry-Ten)  
      (whoseTurn ?agent1)
      (allAtStart ?agent1)
      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Ten)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; Rule 2a:
;;; agent has a piece which is TEN steps away from HOME and will not win
(preconditionForMethod
 (and
      (currCard Sorry-Ten)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
      (notWinner ?agent ?piece1)
      (evaluate 66 (PlusFn ?position1 10))

      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
   (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 66)))

    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Ten)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))


;;; Rule 2b
;;; agent has a piece which is TEN steps away from HOME and will win the game
(preconditionForMethod
 (and
      (currCard Sorry-Three)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
      (evaluate 66 (PlusFn ?position1 10))
      (winner ?agent ?piece1)
      
      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doRecord 
		  ist-Information SorryFactsMt (currCard ?newCard))
    (doRecord 
    	(ist-Information SorryFactsMt (gameWinner ?agent1)))))))


;;; Rule 3a:
(preconditionForMethod
 (and
      (currCard Sorry-Ten)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (piecePosition ?piece1 ?position1)
      (uninferredSentence (piecePosition ?piece1 0))
      (colorOfPiece ?piece1 ?color1)
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece3 ?color2)
      (piecePosition ?piece3 ?position2)
      (evaluate ?nextPosition (PlusFn ?position1 10))
      (evaluate 30 (AbsoluteValueFn (DifferenceFn ?nextPosition ?position2)))
      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))

 (methodForAction
  (moveSorryPiece)

  (actionSequence
   (TheList
    (doForget 
      (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doForget 
      (ist-Information SorryFactsMt (piecePosition ?piece3 ?position2)))
    (doRecord
      (ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))
    (doRecord 
      (ist-Information SorryFactsMt (piecePosition ?piece3 0)))

    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Ten)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))


;;; Rule 3b:
(preconditionForMethod
 (and
      (currCard Sorry-Ten)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (piecePosition ?piece1 ?position1)
      (uninferredSentence (piecePosition ?piece1 0))
      (colorOfPiece ?piece1 ?color1)
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece3 ?color2)
      (piecePosition ?piece3 ?position2)
      (evaluate ?nextPosition (DifferenceFn ?position1 1))
      (evaluate 30 (AbsoluteValueFn (DifferenceFn ?nextPosition ?position2)))
      
      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))

 (methodForAction
  (moveSorryPiece)

  (actionSequence
   (TheList
    (doForget 
      (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doForget 
      (ist-Information SorryFactsMt (piecePosition ?piece3 ?position2)))
    (doRecord
      (ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))
    (doRecord 
      (ist-Information SorryFactsMt (piecePosition ?piece3 0)))

    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Ten)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; Rule 4:
(preconditionForMethod
 (and
      (currCard Sorry-Ten)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (uninferredSentence (piecePosition ?piece1 0))
      (piecePosition ?piece1 ?position1)
      (noSameColorAhead ?piece1 3)
      (noOppoAhead ?piece1 3)
      (evaluate ?nextPosition (PlusFn ?position1 10))
      (lessThan ?nextPosition 66)
      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)

  (actionSequence
   (TheList
   (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))

    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Ten)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; Rule 5:
(preconditionForMethod
 (and
      (currCard Sorry-Ten)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (uninferredSentence (piecePosition ?piece1 0))
      (allCannotMove ?agent1 10)
      (noSameColorAhead ?piece1 -1)
      (noOppoAhead ?piece1 -1)
      (evaluate ?nextPosition (PlusFn ?position1 -1))
      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)

  (actionSequence
   (TheList
   (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))

    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Ten)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))
      
;;; END SORRY-TEN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; SORRY-SORRY
;;; if there is a piece in start and an opponent piece to swap with
(preconditionForMethod
  (and
      (currCard Sorry-Sorry)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 0)
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece2 ?color2)
      (piecePosition ?piece2 ?piece2pos)
      (greaterThan ?piece2pos 0) ;;; piece not in start
      (lessThan ?piece2pos 61) ;;; piece not in safe zone

      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
	  		  (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards))))
      )
    (methodForAction
      (moveSorryPiece)
      
      (actionSequence
        (TheList
        
          (doRecord
            (ist-Information SorryFactsMt (piecePosition ?piece1 ?piece2pos)))
          (doForget
            (ist-Information SorryFactsMt (piecePosition ?piece1 0)))
          (doRecord
            (ist-Information SorryFactsMt (piecePosition ?piece2 0)))
          (doForget
            (ist-Information SorryFactsMt (piecePosition ?piece2 ?piece2pos)))
            
          ;;; swap turns and pick new random card
          (doForget 
            (ist-Information SorryFactsMt (whoseTurn ?agent1)))
          (doRecord 
            (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
          (doForget 
            (ist-Information SorryFactsMt (currCard Sorry-One)))
          (doRecord 
            (ist-Information SorryFactsMt (currCard ?newCard)))
        ))))

;;; if there is no piece in start, just swap turns and pick new card
(preconditionForMethod
  (and
      (currCard Sorry-Sorry)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (uninferredSentence (piecePosition ?piece1 0))

      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
	  		  (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards))))
      )
  (methodForAction
    (moveSorryPiece)
    
    (actionSequence
      (TheList
        
        ;;; swap turns and pick new random card
          (doForget 
            (ist-Information SorryFactsMt (whoseTurn ?agent1)))
          (doRecord 
            (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
          (doForget 
            (ist-Information SorryFactsMt (currCard Sorry-One)))
          (doRecord 
            (ist-Information SorryFactsMt (currCard ?newCard)))
            ))))

;;; if piece in start, but no opponent piece to swap with
;;; just swap turn and pick new card
(preconditionForMethod
  (and
      (currCard Sorry-Sorry)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 0)
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece2 ?color2)
      (piecePosition ?piece2 ?piece2pos)

      ;;; all opponent pieces either in start or safe zone
      (not (greaterThan ?piece2pos 0))
      (not (lessThan ?piece2pos 61))

      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
	  		  (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
    (methodForAction
      (moveSorryPiece)
      
      (actionSequence
        (TheList

          ;;; swap turns and pick new random card
          (doForget 
            (ist-Information SorryFactsMt (whoseTurn ?agent1)))
          (doRecord 
            (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
          (doForget 
            (ist-Information SorryFactsMt (currCard Sorry-One)))
          (doRecord 
            (ist-Information SorryFactsMt (currCard ?newCard)))
        ))))

;;; END SORRY-SORRY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; SORRY-TWO
;;; NOTE: if player pulls 2, gets to pull again, so don't swap turns
;;; Rule 1a:
(preconditionForMethod
 (and
      (currCard Sorry-Two)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (colorOfPiece ?piece2 ?color1)
      (different ?piece1 ?piece2)
      (piecePosition ?piece1 0)
      (uninferredSentence (piecePosition ?piece2 1))
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece3 ?color2)
      (uninferredSentence (piecePosition ?piece3 31))
	  
      (evaluate ?newCard 
		    (RandomMemberFn 
	  		  (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards))))
      )

 (methodForAction
  (moveSorryPiece)

  (actionSequence
   (TheList

    ;;; update piece position
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 1)))
    (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 0)))
 
    ;;; pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Two)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))
              ))))

;;; Rule 1b:
(preconditionForMethod
 (and
      (currCard Sorry-Two)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 0)
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece3 ?color2)
      (piecePosition ?piece3 31)

      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards))))
      )

 (methodForAction
  (moveSorryPiece)

  (actionSequence
   (TheList
    ;;; update piece position
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 1)))
    (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 0)))
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece3 0)))
    (doForget
    	(ist-Information SorryFactsMt (piecePosition ?piece3 31)))
 
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Two)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard))))))
  )

;;; Rule 2a
(preconditionForMethod
 (and
      (currCard Sorry-Two)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
      (notWinner ?agent ?piece1)
      (evaluate 66 (PlusFn ?position1 2))

      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
   (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 66)))

    ;;; pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Two)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard))))))
    )

;;; Rule 2b
(preconditionForMethod
 (and
      (currCard Sorry-Two)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
      (winner ?agent ?piece1)
      (evaluate 66 (PlusFn ?position1 2))

      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
   (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 66)))

    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Two)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard))))))
    (doRecord
      (ist-Information SorryFactsMt (gameWinner ?agent1)))
    )

;;; END SORRY-TWO
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; SORRY-FOUR

;;; end SORRY-FOUR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; SORRY-TWELVE
;;; 1-1. If after moving 12 steps, it lands at home with other 3 pieces, then 
;;; it's the winner.
(preconditionForMethod
 (and
      (currCard Sorry-Twelve)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
      (evaluate 66 (PlusFn ?position1 12))
	  (winner ?agent1 ?piece1)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
   (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 66)))

    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Twelve)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))
		  
	;;; that represents it's the end of the game
    (doRecord
      (ist-Information SorryFactsMt (gameWinner ?agent1)))))))
	  
;;; 1-2. If after moving 12 steps, it's at home but not the winner yet.
;;; Just swap the turn and start picking up random number again.
(preconditionForMethod
 (and
      (currCard Sorry-Twelve)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
      (evaluate 66 (PlusFn ?position1 12))
	  (notWinner ?agent1 ?piece1)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
   (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 66)))

    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Twelve)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; 2. If after moving 12 steps, it lands on the same color, can't do that,
;;; then just swap the turn.
(preconditionForMethod
 (and
      (currCard Sorry-Twelve)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
	  (evaluate ?nextPosition (PlusFn ?position1 12))
	  (lessThanOrEqualTo ?nextPosition 66)
	  (colorOfPiece ?piece2 ?color1)
	  (different ?piece1 ?piece2)
	  (piecePosition ?piece2 ?nextPosition)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Twelve)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; 3. If after moving 12 steps, it lands on different color, knock that one
;;; back to start, and then swap the turn.
(preconditionForMethod
 (and
      (currCard Sorry-Twelve)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
	  (evaluate ?nextPosition (PlusFn ?position1 12))
	  (lessThanOrEqualTo ?nextPosition 66)		;;; Question: Fix this to be lessThanOrEqualTo "Safe Zone"
	  (different ?color1 ?color2)
	  (colorOfPiece ?piece2 ?color2)
	  (piecePosition ?piece2 ?nextPosition)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; knock ?piece2 back
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece2 ?nextPosition)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece2 0)))
	;;; update ?piece1 position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Twelve)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; 4. Distance to home < 12 steps, do nothing, just swap the turn.
(preconditionForMethod
 (and
      (currCard Sorry-Twelve)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
	  (evaluate ?nextPosition (PlusFn ?position1 12))
	  (greaterThan ?nextPosition 66)
	  (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Twelve)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; 5. Otherwise, just move forward 12 steps.
(preconditionForMethod
 (and
      (currCard Sorry-Twelve)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
	  (evaluate ?nextPosition (PlusFn ?position1 12))
	  (lessThanOrEqualTo ?nextPosition 66)
	  (noSameColorAhead ?piece1 12)
      (noOppoAhead ?piece1 12)
	  (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Twelve)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; end SORRY-TWELVE


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; SORRY-SEVEN
;;; 1-1. Move forward 7 steps without arriving home
(preconditionForMethod
 (and
      (currCard Sorry-Seven)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
	  (evaluate ?nextPosition (PlusFn ?position1 7))
	  (lessThan ?nextPosition 66)
	  (noSameColorAhead ?piece1 7)
      (noOppoAhead ?piece1 7)
	  (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; update current position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Seven)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; 1-2. Move forward 7 steps with arriving home (current agent is the winner)
(preconditionForMethod
 (and
      (currCard Sorry-Seven)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
	  (evaluate ?nextPosition (PlusFn ?position1 7))
	  (equals ?nextPosition 66)
	  (winner ?agent1 ?piece1))
	  ;;; (noSameColorAhead ?piece1 7)
      ;;; (noOppoAhead ?piece1 7)  [don't need this check for card 7 in video]
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; update current position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))
    ;;; we have the winner!
	(doRecord 
    	(ist-Information SorryFactsMt (gameWinner ?agent1)))))))

;;; 1-3. Move forward 7 steps with arriving home (current agent is not the winner)
(preconditionForMethod
 (and
      (currCard Sorry-Seven)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
	  (evaluate ?nextPosition (PlusFn ?position1 7))
	  (equals ?nextPosition 66)
	  (notWinner ?agent1 ?piece1)
	  ;;; (noSameColorAhead ?piece1 7)
      ;;; (noOppoAhead ?piece1 7)  [don't need this check for card 7 in video]
	  (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; update current position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Seven)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; 2. Split between 2 pawns
;;; 2-1: only knock back 1 step forward
(preconditionForMethod
 (and
      (currCard Sorry-Seven)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
	  (evaluate ?nextPosition (PlusFn ?position1 1))
	  
	  ;;; check whether 1 step forward has opponent
	  (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece2 ?color2)
      (piecePosition ?piece2 ?position2)
      (evaluate 30 (AbsoluteValueFn (DifferenceFn ?nextPosition ?position2)))
	  
	  (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; update current agent piece position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))
	;;; update opponent piece position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece2 ?position2)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece2 0)))
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Seven)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; 2-1: knock back 2 step forward
(preconditionForMethod
 (and
      (currCard Sorry-Seven)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
	  (evaluate ?nextPosition (PlusFn ?position1 2))
	  
	  ;;; check whether 2 step forward has opponent
	  (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece2 ?color2)
      (piecePosition ?piece2 ?position2)
      (evaluate 30 (AbsoluteValueFn (DifferenceFn ?nextPosition ?position2)))
	  
	  (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; update current agent piece position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))
	;;; update opponent piece position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece2 ?position2)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece2 0)))
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Seven)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))
		  
;;; 2-1: knock back 3 step forward
(preconditionForMethod
 (and
      (currCard Sorry-Seven)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
	  (evaluate ?nextPosition (PlusFn ?position1 3))
	  
	  ;;; check whether 2 step forward has opponent
	  (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece2 ?color2)
      (piecePosition ?piece2 ?position2)
      (evaluate 30 (AbsoluteValueFn (DifferenceFn ?nextPosition ?position2)))
	  
	  (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; update current agent piece position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))
	;;; update opponent piece position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece2 ?position2)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece2 0)))
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Seven)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))
		  
;;; 2-1: knock back 4 step forward
(preconditionForMethod
 (and
      (currCard Sorry-Seven)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
	  (evaluate ?nextPosition (PlusFn ?position1 4))
	  
	  ;;; check whether 2 step forward has opponent
	  (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece2 ?color2)
      (piecePosition ?piece2 ?position2)
      (evaluate 30 (AbsoluteValueFn (DifferenceFn ?nextPosition ?position2)))
	  
	  (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; update current agent piece position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))
	;;; update opponent piece position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece2 ?position2)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece2 0)))
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Seven)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))
		  
;;; 2-1: knock back 5 step forward
(preconditionForMethod
 (and
      (currCard Sorry-Seven)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
	  (evaluate ?nextPosition (PlusFn ?position1 5))
	  
	  ;;; check whether 2 step forward has opponent
	  (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece2 ?color2)
      (piecePosition ?piece2 ?position2)
      (evaluate 30 (AbsoluteValueFn (DifferenceFn ?nextPosition ?position2)))
	  
	  (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; update current agent piece position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))
	;;; update opponent piece position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece2 ?position2)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece2 0)))
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Seven)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; 2-1: knock back 6 step forward
(preconditionForMethod
 (and
      (currCard Sorry-Seven)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
	  (evaluate ?nextPosition (PlusFn ?position1 6))
	  
	  ;;; check whether 2 step forward has opponent
	  (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece2 ?color2)
      (piecePosition ?piece2 ?position2)
      (evaluate 30 (AbsoluteValueFn (DifferenceFn ?nextPosition ?position2)))
	  
	  (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; update current agent piece position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))
	;;; update opponent piece position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece2 ?position2)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece2 0)))
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Seven)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; 2-1: knock back 7 step forward
(preconditionForMethod
 (and
      (currCard Sorry-Seven)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
	  (evaluate ?nextPosition (PlusFn ?position1 7))
	  
	  ;;; check whether 2 step forward has opponent
	  (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece2 ?color2)
      (piecePosition ?piece2 ?position2)
      (evaluate 30 (AbsoluteValueFn (DifferenceFn ?nextPosition ?position2)))
	  
	  (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
			    (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; update current agent piece position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))
	;;; update opponent piece position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece2 ?position2)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece2 0)))
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Seven)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; 3. if this piece arrives at home with extra steps, then recursively move remaining pieces forward.
(preconditionForMethod
 (and
      (currCard Sorry-Seven)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 ?position1)
	  (lessThan (DifferenceFn 66 ?position1) 7)
	  (evaluate ?remainingSteps (DifferenceFn ?position1 59)) ;;; check the remaining steps we still have...
	  
	  ;;; not swap the turn in this scenario...
	  ;;; have new card based on the remaining steps...
	  (chooseCardWithSteps ?newCard ?remainingSteps))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; update current agent piece position
	(doForget
		  (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
	(doRecord
		  (ist-Information SorryFactsMt (piecePosition ?piece1 66)))
    ;;; pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-Seven)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))
	(moveSorryPiece)))))
;;; end SORRY-SEVEN